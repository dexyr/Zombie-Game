<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init

image_xscale = 1;
image_yscale = 1;
image_speed = 0;

timer = 0;

//vars
x_facing = 0;
y_facing = 0;

input_left = false;
input_right = false;

input_up = false;
input_down = false;

input_x_dir = 0;
input_y_dir = 0;

input_sprint = false;
sprinting = false;

input_aiming = false;
aiming = false;

//temporary gun stuff

input_shoot = false;

shoot_cd = 0;

input_reload = false;

reloading = false;

reload = 0;

mag = 12;

mags = 3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///input

//timer

timer++;

//Set facing vars
x_facing = mouse_x;
y_facing = mouse_y;

//Set input vars
input_left = keyboard_check(ord('A'));
input_right = keyboard_check(ord('D'));

input_up = keyboard_check(ord('W'));
input_down = keyboard_check(ord('S'));

input_x_dir = -input_left + input_right;
input_y_dir = -input_up + input_down;

input_sprint = keyboard_check(vk_shift);
input_aiming = mouse_check_button(mb_right);

if input_sprint
{
    sprinting = true;
}
else
{
    sprinting = false;
}

if input_aiming
{
    aiming = true;
}
else
{
    aiming = false;
}

//free ammo

if keyboard_check(vk_f2)
{
    mags = 3;
}

//temporary shooting stuff

input_shoot = mouse_check_button_pressed(mb_left);

input_reload = keyboard_check(ord('R'));

if input_reload
{
    if !reloading &amp;&amp; mag &lt; 12 &amp;&amp; mags &gt; 0
    {
        reloading = true;
        reload = 90;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///turning/movement

image_angle = point_direction(x, y, x_facing, y_facing);

if sprinting
{
    if abs(x - x_facing) &gt; 1 &amp;&amp; abs(y - y_facing) &gt; 1
    {
        var x_new, y_new;
        x_new = (x_facing - x) / point_distance(x, y, x_facing, y_facing);
        y_new = (y_facing - y) / point_distance(x, y, x_facing, y_facing);
        
        x = x + (5/6 * x_new);
        y = y + (5/6 * y_new);
    }
}
else if aiming
{
    x = x + (1/6 * input_x_dir);
    y = y + (1/6 * input_y_dir);
}
else
{
    x = x + (3/6 * input_x_dir);
    y = y + (3/6 * input_y_dir);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///shooting

if input_shoot &amp;&amp; !sprinting &amp;&amp; !reloading &amp;&amp; mag &gt; 0
{
    if shoot_cd == 0
    {
        //TEMPORARY, TRIG FUNCTIONS ARE EXPENSIVE
        var rotation, x_axis_speed, y_axis_speed, x_offset, y_offset;
        
        if aiming
        {
            rotation = point_direction(x, y, x_facing, y_facing);
        }
        else
        {
            rotation = (random(10) - 5) + point_direction(x, y, x_facing, y_facing);
        }
        
        x_axis_speed = dcos(rotation);
        y_axis_speed = -dsin(rotation);
        
        x_offset = sqrt(145/2) * cos(degtorad(point_direction(x, y, x_facing, y_facing)) - arccos(8.5/sqrt(145/2)));
        y_offset = sqrt(145/2) * sin(degtorad(point_direction(x, y, x_facing, y_facing)) - arccos(8.5/sqrt(145/2)));
        
        pistol_shoot(x + x_offset, y - y_offset, rotation, x_axis_speed, y_axis_speed);
        
        mag--;
        shoot_cd = 6;
    }
}

if shoot_cd &gt; 0
{
    shoot_cd--;
}

if reloading
{
    reload--;
    
    if reload == 0
    {
        reloading = false;
        mag = 12;
        mags--;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw ammo

if !reloading
{
    if mag &gt;0
    {
        draw_sprite_ext(spr_hud_pistol_ammo, mag, 0, 0, 8, 8, 0, c_white, 1);
    }
    else
    {
        draw_sprite_ext(spr_hud_pistol_ammo_empty, (timer % (7 * 6)) / 6, 0, 0, 8, 8, 0, c_white, 1);
    }
}
else
{
    draw_sprite_ext(spr_hud_reloading, floor(reload / 23), 0, 0, 8, 8, 0, c_white, 1);
}

draw_sprite_ext(spr_hud_pistol_mag, mags, 0, 0, 8, 8, 0, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw_self()

draw_self();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// hitboxes

if global.show_hitboxes
{
    draw_set_color(c_yellow);
    draw_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
