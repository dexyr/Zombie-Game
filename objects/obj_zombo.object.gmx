<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_zombo</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init

image_xscale = 1;
image_yscale = 1;
image_speed = 1/20;

target = noone;

hp = 6;

x_facing = 0;
y_facing = 0;

x_speed = 0;
y_speed = 0;

move_speed = 2;

input_x_dir = 0;
input_y_dir = 0;

head = instance_create(x, y, obj_zombo_head);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement Prediction and Collision

//Code from my CS1 Project -- with major edits

//Check Projected Collision Twice

var x_above = false;
var y_left = false;

for (c = 0; c &lt; 2; c++)
{
    var col_step = 0;
    var col_obj = noone;

    //4 Step Collision Check

    for (i = 1; i &lt; 5; i++)
    {
        col_step = (i / 4);
        col_obj = instance_place(x + (x_speed * col_step), y + (y_speed * col_step), obj_zombo);
    
        if col_obj != noone
        {
            i = 5;
        }
    }

    //If there is a collision

    if col_obj != noone
    {
        //Find if above or below
        if col_obj.y &gt; bbox_bottom
        {
            
            y_above = true;
        }
        else if col_obj.y &lt; bbox_top
        {
            
            y_above = false;
        }
        
        //Find it left or right
        if col_obj.x &gt; bbox_right
        {
            
            x_left = true;
        }
        else if col_obj.x &lt; bbox_left
        {
            
            x_left = false;
        }
        
        //Adjust based on greater distance
        if abs(y - col_obj.y) &gt; abs(x - col_obj.x)
        {
            if y_above = true
            {
                y_speed = col_obj.bbox_top - bbox_bottom - 1;
            }
            else
            {
                y_speed = col_obj.bbox_bottom - bbox_top + 1;
            }
        }
        else
        {
            if x_left = true
            {
                x_speed = col_obj.bbox_left - bbox_right - 1;
            }
            else
            {
                x_speed = col_obj.bbox_right - bbox_left + 1;
            }
        }
    }
}

//Finally, finally, finally, adjust x and y pos

if !global.enemy_pause
{
    x += x_speed;
    y += y_speed;
    head.x += x_speed;
    head.y += y_speed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///input

//find target

if target == noone
{
    if instance_exists(obj_player)
    {
        target = instance_nearest(x, y, obj_player);
    }
}

//Set facing vars
x_facing = target.x;
y_facing = target.y;

//Set input vars

input_x_dir = (x_facing - x) / point_distance(x, y, x_facing, y_facing);
input_y_dir = (y_facing - y) / point_distance(x, y, x_facing, y_facing);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///deleto

if hp &lt;= 0
{
    with(head)
    {
        instance_destroy();
    }
    
    //deleto, repeato
    
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///turning/movement

image_angle = point_direction(x, y, x_facing, y_facing);
head.image_angle = point_direction(x, y, x_facing, y_facing);

x_speed = (move_speed / 6) * input_x_dir;
y_speed = (move_speed / 6) * input_y_dir;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw_self()

draw_self();

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// hitboxes

if global.show_hitboxes
{
    draw_set_color(c_yellow);
    draw_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
